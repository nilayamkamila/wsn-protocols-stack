package com.ssu.wsn.graphics;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.util.ShapeUtilities;

/**
 * This program demonstrates how to draw XY line chart with XYDataset
 * using JFreechart library.
 * @author www.codejava.net
 *
 */
public class WSNXYLineGenericChart2 extends JFrame {
	XYSeriesCollection dataset = new XYSeriesCollection();
	XYSeries[] series;
	JPanel chartPanel;

	public WSNXYLineGenericChart2() {
		super("Wireless Sensor Network Routing Performance");
		
		chartPanel = createChartPanel(null,null,null);
		add(chartPanel, BorderLayout.CENTER);
		setSize(640, 480);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
	}
	
	
	public WSNXYLineGenericChart2(Map<String, double[]> seriesMap){
		this();
		series = new XYSeries[seriesMap.size()];
		Iterator<String>  keyIterator = seriesMap.keySet().iterator();
		int i=0;
		while(keyIterator.hasNext()){
			series[i++] = new XYSeries(keyIterator.next());
		}
		
		Iterator<double[]>  valueIterator = seriesMap.values().iterator();
		i = 0;
		while(valueIterator.hasNext()){
			double[] data = valueIterator.next();
			for(int j=0;j<data.length; j++){
				series[i].add(j,data[j]);
			}
			dataset.addSeries(series[i]);
			i++;
		}
	}
	
	private JPanel createChartPanel() {
		String chartTitle = "WSN Performance";
		String xAxisLabel = "X-Axis name";
		String yAxisLabel = "Y-Axis name";
		
		//XYDataset dataset = createDataset();
		
		JFreeChart chart = ChartFactory.createXYLineChart(chartTitle, 
				xAxisLabel, yAxisLabel, dataset);
		
//		boolean showLegend = false;
//		boolean createURL = false;
//		boolean createTooltip = false;
//		
//		JFreeChart chart = ChartFactory.createXYLineChart(chartTitle, 
//				xAxisLabel, yAxisLabel, dataset, 
//				PlotOrientation.HORIZONTAL, showLegend, createTooltip, createURL);
		
		customizeChart(chart);
		
		// saves the chart as an image files
		File imageFile = new File("XYLineChart.png");
		int width = 640;
		int height = 480;
		
		try {
			ChartUtilities.saveChartAsPNG(imageFile, chart, width, height);
		} catch (IOException ex) {
			System.err.println(ex);
		}
		
		return new ChartPanel(chart);
	}
	
	private JPanel createChartPanel(String chartTitle, String xAxisLabel, String yAxisLabel) {
		chartTitle = (null == chartTitle) ? "WSN Performance" : chartTitle;
		xAxisLabel = (null == xAxisLabel) ? "Network Lifetime" : xAxisLabel;
		yAxisLabel = (null == yAxisLabel) ? "Residual Energy" : yAxisLabel;
		//XYDataset dataset = createDataset();
		
		JFreeChart chart = ChartFactory.createXYLineChart(chartTitle, 
				xAxisLabel, yAxisLabel, dataset);
		
//		boolean showLegend = false;
//		boolean createURL = false;
//		boolean createTooltip = false;
//		
//		JFreeChart chart = ChartFactory.createXYLineChart(chartTitle, 
//				xAxisLabel, yAxisLabel, dataset, 
//				PlotOrientation.HORIZONTAL, showLegend, createTooltip, createURL);
		
		customizeChart(chart);
		
		// saves the chart as an image files
		File imageFile = new File("XYLineChart.png");
		int width = 640;
		int height = 480;
		
		try {
			ChartUtilities.saveChartAsPNG(imageFile, chart, width, height);
		} catch (IOException ex) {
			System.err.println(ex);
		}
		
		return new ChartPanel(chart);
	}
	
	private void customizeChart(JFreeChart chart) {
		XYPlot plot = chart.getXYPlot();
		XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();

		// sets paint color for each series
		renderer.setSeriesPaint(0, Color.RED);
		renderer.setSeriesPaint(1, Color.GREEN);
		renderer.setSeriesPaint(2, Color.YELLOW);
		

		// sets thickness for series (using strokes)
		renderer.setSeriesStroke(0, new BasicStroke(1f));
		renderer.setSeriesStroke(1, new BasicStroke(1f));
		renderer.setSeriesStroke(2, new BasicStroke(1f));
		
		
		
		plot.setOutlinePaint(Color.BLUE);
		plot.setOutlineStroke(new BasicStroke(1.0f));
		
		// sets renderer for lines
		plot.setRenderer(renderer);
		
		// sets plot background
		plot.setBackgroundPaint(Color.LIGHT_GRAY);
		
		// sets paint color for the grid lines
		plot.setRangeGridlinesVisible(false);
		plot.setRangeGridlinePaint(Color.BLACK);
		
		plot.setDomainGridlinesVisible(false);
		plot.setDomainGridlinePaint(Color.BLACK);
		
	}
	
	public static void main(String[] args) {
		double[] dataFlood = {3.9753707827199996E8, 3.9507415654399997E8, 3.92611234816E8,      3.9014831308799994E8, 3.876853913599999E8,  3.852224696319999E8,  3.827595479039999E8,  3.802966261759999E8, 3.7783370444799984E8, 3.7537078271999985E8, 3.7290786099199986E8, 3.704449392639998E8, 3.679820175359998E8, 3.655190958079998E8, 3.630561740799998E8, 3.6059325235199976E8, 3.581303306239997E8, 3.556674088959997E8, 3.5320448716799974E8, 3.507415654399997E8, 3.4827864371199965E8, 3.4581572198399967E8, 3.433528002559997E8, 3.4088987852799964E8, 3.384269567999996E8, 3.359640350719996E8, 3.335011133439996E8, 3.310381916159996E8, 3.2857526988799953E8, 3.2611234815999955E8, 3.2364942643199956E8, 3.211865047039995E8, 3.187235829759995E8, 3.162606612479995E8, 3.137977395199995E8, 3.1133481779199946E8, 3.088718960639994E8, 3.064089743359995E8, 3.0394605260799944E8, 3.014831308799994E8, 2.990202091519994E8, 2.965572874239994E8, 2.940943656959994E8, 2.916314439679994E8, 2.891685222399994E8, 2.8670560051199937E8, 2.842426787839994E8, 2.817797570559994E8, 2.7931683532799935E8, 2.7685391359999937E8, 2.743909918719994E8, 2.7192807014399934E8, 2.694651484159993E8, 2.670022266879993E8};
	    double[] dataRTRA=   {3.9753707827199996E8, 3.9600284774399996E8, 3.9446861721599996E8, 3.9386307788799995E8, 3.9325753855999994E8, 3.9265199923199993E8, 3.9111776870399994E8, 3.905122293759999E8, 3.899066900479999E8,  3.893011507199999E8,  3.886956113919999E8, 3.880900720639999E8, 3.874845327359999E8, 3.868789934079999E8, 3.8627345407999986E8, 3.8566791475199986E8, 3.8506237542399985E8, 3.8445683609599984E8, 3.838512967679998E8, 3.832457574399998E8, 3.826402181119998E8, 3.820346787839998E8, 3.814291394559998E8, 3.808236001279998E8, 3.802180607999998E8, 3.7961252147199976E8, 3.7900698214399976E8, 3.7840144281599975E8, 3.7779590348799974E8, 3.771903641599997E8, 3.765848248319997E8, 3.759792855039997E8, 3.753737461759997E8, 3.747682068479997E8, 3.741626675199997E8, 3.735571281919997E8, 3.7295158886399966E8, 3.7234604953599966E8, 3.7174051020799965E8, 3.7113497087999964E8, 3.705294315519996E8, 3.699238922239996E8, 3.693183528959996E8, 3.687128135679996E8, 3.681072742399996E8, 3.675017349119996E8, 3.668961955839996E8, 3.6629065625599957E8, 3.6568511692799956E8, 3.6507957759999955E8, 3.6447403827199954E8, 3.638684989439995E8, 3.632629596159995E8, 3.626574202879995E8, 3.620518809599995E8, 3.614463416319995E8, 3.608408023039995E8, 3.602352629759995E8, 3.5962972364799947E8, 3.5902418431999946E8, 3.5841864499199945E8, 3.5781310566399944E8, 3.572075663359994E8, 3.566020270079994E8, 3.559964876799994E8, 3.553909483519994E8, 3.547854090239994E8, 3.541798696959994E8, 3.535743303679994E8, 3.5296879103999937E8, 3.5236325171199936E8, 3.5175771238399935E8, 3.5115217305599934E8, 3.505466337279993E8, 3.499410943999993E8, 3.493355550719993E8, 3.487300157439993E8, 3.481244764159993E8, 3.475189370879993E8, 3.469133977599993E8, 3.4630785843199927E8, 3.4570231910399926E8, 3.4509677977599925E8, 3.4449124044799924E8, 3.4388570111999923E8, 3.432801617919992E8, 3.426746224639992E8, 3.420690831359992E8, 3.414635438079992E8, 3.408580044799992E8, 3.402524651519992E8, 3.3964692582399917E8, 3.3904138649599916E8, 3.3843584716799915E8, 3.3783030783999914E8, 3.3722476851199913E8, 3.366192291839991E8, 3.360136898559991E8, 3.354081505279991E8, 3.348026111999991E8, 3.341970718719991E8, 3.335915325439991E8, 3.3298599321599907E8, 3.3238045388799906E8, 3.3177491455999905E8, 3.3116937523199904E8, 3.3056383590399903E8, 3.29958296575999E8, 3.29352757247999E8, 3.28747217919999E8, 3.28141678591999E8, 3.27536139263999E8, 3.26930599935999E8, 3.2632506060799897E8, 3.2571952127999896E8, 3.2511398195199895E8, 3.2450844262399894E8, 3.2390290329599893E8, 3.232973639679989E8, 3.226918246399989E8, 3.2208628531199896E8, 3.2148074598399895E8, 3.2087520665599895E8, 3.2026966732799894E8, 3.196641279999989E8, 3.190585886719989E8, 3.184530493439989E8, 3.1784751001599896E8, 3.1724197068799895E8, 3.1663643135999894E8, 3.1603089203199893E8, 3.154253527039989E8, 3.148198133759989E8, 3.142142740479989E8, 3.136087347199989E8, 3.130031953919989E8, 3.1239765606399894E8, 3.117921167359989E8, 3.111865774079989E8, 3.105810380799989E8, 3.099754987519989E8, 3.093699594239989E8, 3.087644200959989E8, 3.0815888076799893E8, 3.075533414399989E8, 3.069478021119989E8, 3.063422627839989E8, 3.057367234559989E8, 3.051311841279989E8, 3.045256447999989E8, 3.039201054719989E8, 3.0331456614399886E8, 3.027090268159989E8, 3.021034874879989E8, 3.014979481599989E8, 3.008924088319989E8, 3.002868695039989E8, 2.9968133017599887E8, 2.9907579084799886E8, 2.984702515199989E8, 2.978647121919989E8, 2.972591728639989E8, 2.966536335359989E8, 2.960480942079989E8, 2.9544255487999886E8, 2.9483701555199885E8, 2.9423147622399884E8, 2.9362593689599884E8, 2.930203975679989E8, 2.924148582399989E8, 2.9180931891199887E8, 2.9120377958399886E8, 2.9059824025599885E8, 2.8999270092799884E8, 2.8938716159999883E8, 2.887816222719989E8, 2.881760829439989E8, 2.8757054361599886E8, 2.8696500428799886E8, 2.8635946495999885E8, 2.8575392563199884E8, 2.851483863039988E8, 2.845428469759988E8, 2.839373076479988E8, 2.8333176831999886E8, 2.8272622899199885E8, 2.8212068966399884E8, 2.8151515033599883E8, 2.809096110079988E8, 2.803040716799988E8, 2.796985323519988E8, 2.7909299302399886E8, 2.7848745369599885E8, 2.7788191436799884E8, 2.772763750399988E8, 2.766708357119988E8, 2.760652963839988E8, 2.754597570559988E8, 2.748542177279988E8, 2.742486783999988E8, 2.7364313907199883E8, 2.730375997439988E8, 2.724320604159988E8, 2.718265210879988E8, 2.712209817599988E8, 2.706154424319988E8, 2.700099031039988E8, 2.6940436377599883E8, 2.687988244479988E8, 2.681932851199988E8, 2.675877457919988E8, 2.669822064639988E8, 2.663766671359988E8, 2.6577112780799878E8, 2.6516558847999877E8, 2.645600491519988E8, 2.639545098239988E8, 2.633489704959988E8, 2.627434311679988E8, 2.6213789183999878E8, 2.615323525119988E8, 2.6092681318399882E8, 2.603212738559988E8, 2.597157345279988E8, 2.591101951999988E8, 2.5850465587199882E8, 2.578991165439988E8, 2.5729357721599883E8, 2.5668803788799882E8, 2.560824985599988E8, 2.5547695923199883E8, 2.5487141990399882E8, 2.5426588057599884E8, 2.5366034124799883E8, 2.5305480191999882E8, 2.5244926259199882E8, 2.5184372326399884E8, 2.5123818393599886E8, 2.5063264460799885E8, 2.5002710527999884E8, 2.4942156595199883E8, 2.4881602662399885E8, 2.4821048729599884E8, 2.4760494796799886E8, 2.4699940863999885E8, 2.4639386931199884E8, 2.4578832998399886E8, 2.4518279065599886E8, 2.4457725132799888E8, 2.4397171199999887E8, 2.4336617267199886E8, 2.4276063334399885E8, 2.4215509401599887E8, 2.415495546879989E8, 2.4094401535999888E8, 2.4033847603199887E8, 2.3973293670399886E8, 2.3912739737599888E8, 2.3852185804799888E8, 2.379163187199989E8, 2.373107793919989E8, 2.3670524006399888E8, 2.360997007359989E8, 2.354941614079989E8, 2.348886220799989E8, 2.342830827519989E8, 2.336775434239989E8, 2.3307200409599888E8, 2.324664647679989E8, 2.3186092543999892E8, 2.3125538611199892E8, 2.306498467839989E8, 2.300443074559989E8, 2.294387681279989E8, 2.288332287999989E8, 2.282276894719989E8, 2.2762215014399892E8, 2.270166108159989E8, 2.264110714879989E8, 2.258055321599989E8, 2.251999928319989E8, 2.245944535039989E8, 2.2398891417599893E8, 2.2338337484799892E8, 2.227778355199989E8, 2.221722961919989E8, 2.2156675686399892E8, 2.209612175359989E8, 2.203556782079989E8, 2.1975013887999892E8, 2.191445995519989E8, 2.185390602239989E8, 2.179335208959989E8, 2.1732798156799892E8, 2.167224422399989E8, 2.1611690291199893E8, 2.1551136358399892E8, 2.149058242559989E8, 2.143002849279989E8, 2.1369474559999892E8, 2.130892062719989E8, 2.1248366694399893E8, 2.1187812761599892E8, 2.112725882879989E8, 2.106670489599989E8, 2.100615096319989E8, 2.0945597030399892E8, 2.088504309759989E8, 2.0824489164799893E8, 2.0763935231999892E8, 2.070338129919989E8, 2.064282736639989E8, 2.0582273433599892E8, 2.052171950079989E8, 2.0461165567999893E8, 2.0400611635199893E8, 2.0340057702399892E8, 2.027950376959989E8, 2.0218949836799893E8, 2.0158395903999892E8, 2.0097841971199894E8, 2.0037288038399893E8, 1.9976734105599892E8, 1.991618017279989E8, 1.985562623999989E8, 1.9795072307199892E8, 1.9734518374399891E8, 1.9673964441599894E8, 1.9613410508799893E8, 1.9552856575999892E8, 1.949230264319989E8, 1.943174871039989E8, 1.9371194777599892E8, 1.931064084479989E8, 1.9250086911999893E8, 1.9189532979199892E8, 1.912897904639989E8, 1.906842511359989E8, 1.900787118079989E8, 1.8947317247999892E8, 1.8886763315199894E8, 1.8826209382399893E8, 1.8765655449599892E8, 1.870510151679989E8, 1.864454758399989E8, 1.8583993651199892E8, 1.852343971839989E8, 1.8462885785599893E8};
	    
	    double[] dataRTRA2=   {3.9753707827199996E8, 3.9600284774399996E8, 3.9446861721599996E8, 3.9386307788799995E8, 3.9325753855999994E8, 3.9265199923199993E8,4413333.222E2,42221233};
	    
	    //double[] dataFlood = {3.9753707827199996E8, 3.9507415654399997E8, 3.92611234816E8,      };
	    //double[] dataRTRA=   {3.9753707827199996E8, 3.9600284774399996E8, 3.9446861721599996E8, 3.9386307788799995E8, 3.9325753855999994E8, 3.9265199923199993E8, };
		/*SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				new WSNXYLineGenericChart(dataFlood, dataRTRA).setVisible(true);
			}
		});*/
	    Map<String, double[]> seriesMap = new HashMap<String, double[]>();
	    seriesMap.put("Xlooding", dataFlood);
	    seriesMap.put("RTRA", dataRTRA);
	    seriesMap.put("RTRA2", dataRTRA2);
	    
	    plotGenericChart(seriesMap);
	    //plotGenericChart(new String[]{"Flooding", "RTRA"}, dataFlood, dataRTRA);
	}
	/*public static void plotGenericChart(double[] data1, double[] data2){
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				new WSNXYLineGenericChart2(data1, data2).setVisible(true);
			}
		});
	}*/
	public JPanel getChartPanel(){
		return chartPanel;
	}
	public static void plotGenericChart(Map seriesMap){
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				new WSNXYLineGenericChart2(seriesMap).setVisible(true);
			}
		});
	}
}